# Generated by Django 5.2 on 2025-05-22 20:52

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("company_name", models.TextField()),
                ("rfc", models.TextField(blank=True, null=True)),
                ("manager_name", models.TextField(blank=True, null=True)),
                (
                    "manager_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("country", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("currency", models.CharField(blank=True, max_length=3, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("last_payment_date", models.DateField(blank=True, null=True)),
                ("next_payment_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "verbose_name": "Compañía",
                "verbose_name_plural": "Compañías",
                "db_table": "companies",
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        blank=True,
                        help_text="Identificador único del dispositivo, ej: ESP32_LivingRoom_Sensor1",
                        max_length=100,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre descriptivo del dispositivo", max_length=100
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Ubicación del dispositivo",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Dirección IP actual del dispositivo (opcional)",
                        null=True,
                    ),
                ),
                (
                    "mac_address",
                    models.CharField(
                        blank=True,
                        help_text="Dirección MAC del dispositivo (opcional)",
                        max_length=17,
                        null=True,
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Última vez que el dispositivo envió datos o se actualizó",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si el dispositivo está activo y se espera que envíe datos",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Dispositivo",
                "verbose_name_plural": "Dispositivos",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServicePlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("plan_name", models.TextField()),
                ("cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("max_vehicles", models.IntegerField()),
                ("registered_vehicles", models.IntegerField(default=0)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "verbose_name": "Plan de Servicio",
                "verbose_name_plural": "Planes de Servicio",
                "db_table": "service_plans",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("owner", "Propietario"),
                            ("admin", "Administrador"),
                            ("standard", "Estándar"),
                        ],
                        default="standard",
                        max_length=10,
                    ),
                ),
                ("name", models.TextField()),
                ("last_name", models.TextField()),
                ("phone", models.TextField(blank=True, null=True)),
                ("birthday", models.DateField(blank=True, null=True)),
                ("language", models.TextField(blank=True, null=True)),
                ("company_info", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("deleted", models.BooleanField(default=False)),
                ("renewal_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="core_app_user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="core_app_user_permissions_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core_app.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="InvitationCode",
            fields=[
                (
                    "code",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core_app.company",
                    ),
                ),
                (
                    "used_by_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="invitations_used",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Código de Invitación",
                "verbose_name_plural": "Códigos de Invitación",
                "db_table": "invitation_codes",
            },
        ),
        migrations.CreateModel(
            name="Receptor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("mac_address", models.CharField(max_length=17, unique=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core_app.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Receptor",
                "verbose_name_plural": "Receptores",
                "db_table": "receptors",
            },
        ),
        migrations.CreateModel(
            name="Sensor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("sensor_identifier", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "receptor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core_app.receptor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sensor",
                "verbose_name_plural": "Sensores",
                "db_table": "sensors",
            },
        ),
        migrations.AddField(
            model_name="company",
            name="service_plan",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core_app.serviceplan",
            ),
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("alias", models.TextField(blank=True, null=True)),
                ("brand", models.TextField(blank=True, null=True)),
                ("model", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("year", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core_app.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vehículo",
                "verbose_name_plural": "Vehículos",
                "db_table": "vehicles",
            },
        ),
        migrations.CreateModel(
            name="Data",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Fecha y hora de la medición",
                    ),
                ),
                (
                    "prefijo_id_rt",
                    models.CharField(
                        blank=True,
                        help_text="Prefijo para identificar la fórmula de cálculo, ej: RPS_A",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "valor_crudo_psi",
                    models.FloatField(
                        blank=True,
                        help_text="Valor crudo de presión (ej: del sensor en PSI)",
                        null=True,
                    ),
                ),
                (
                    "valor_crudo_temp",
                    models.FloatField(
                        blank=True,
                        help_text="Valor crudo de temperatura (ej: del sensor)",
                        null=True,
                    ),
                ),
                (
                    "valor_crudo_volt",
                    models.FloatField(
                        blank=True,
                        help_text="Valor crudo de voltaje (ej: del sensor)",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, help_text="Latitud geográfica", null=True
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True, help_text="Longitud geográfica", null=True
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True, help_text="Altitud en metros", null=True
                    ),
                ),
                (
                    "speed",
                    models.FloatField(
                        blank=True,
                        help_text="Velocidad en m/s o km/h según convención",
                        null=True,
                    ),
                ),
                (
                    "course",
                    models.FloatField(
                        blank=True,
                        help_text="Dirección del movimiento en grados",
                        null=True,
                    ),
                ),
                (
                    "satellites",
                    models.IntegerField(
                        blank=True, help_text="Número de satélites GPS", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "device",
                    models.ForeignKey(
                        blank=True,
                        help_text="Dispositivo asociado a este dato",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_records",
                        to="core_app.device",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dato de Telemetría (Antiguo)",
                "verbose_name_plural": "Datos de Telemetría (Antiguos)",
                "db_table": "telemetry_data",
                "ordering": ["-timestamp", "device"],
                "indexes": [
                    models.Index(
                        fields=["device", "-timestamp"],
                        name="telemetry_d_device__a279d8_idx",
                    ),
                    models.Index(
                        fields=["prefijo_id_rt"], name="telemetry_d_prefijo_b748a2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DeviceData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("temperature", "Temperatura"),
                            ("humidity", "Humedad"),
                            ("pressure", "Presión Atmosférica"),
                            ("light_intensity", "Intensidad de Luz"),
                            ("co2", "Nivel de CO2"),
                            ("voltage", "Voltaje"),
                            ("current", "Corriente"),
                            ("power", "Potencia"),
                            ("motion", "Movimiento Detectado"),
                            ("door_status", "Estado de Puerta"),
                            ("water_level", "Nivel de Agua"),
                            ("generic", "Dato Genérico"),
                            ("raw_psi", "Presión Cruda PSI"),
                            ("raw_temp", "Temperatura Cruda"),
                            ("raw_volt", "Voltaje Crudo"),
                        ],
                        help_text="Tipo de dato medido",
                        max_length=50,
                    ),
                ),
                (
                    "data_value",
                    models.FloatField(
                        help_text="Valor numérico del dato medido (procesado/convertido)"
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        help_text="Unidad de medida (ej: °C, %, hPa, kPa, V)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "prefijo_id_rt",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("valor_crudo_psi", models.FloatField(blank=True, null=True)),
                ("valor_crudo_temp", models.FloatField(blank=True, null=True)),
                ("valor_crudo_volt", models.FloatField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("altitude", models.FloatField(blank=True, null=True)),
                ("speed", models.FloatField(blank=True, null=True)),
                ("course", models.FloatField(blank=True, null=True)),
                ("satellites", models.IntegerField(blank=True, null=True)),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Fecha y hora de la medición",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_points",
                        to="core_app.device",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dato de Dispositivo",
                "verbose_name_plural": "Datos de Dispositivos",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["device", "data_type", "-timestamp"],
                        name="core_app_de_device__dc173a_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="SensorReading",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("unique_id", models.UUIDField(blank=True, null=True)),
                (
                    "avg",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.DecimalField(decimal_places=2, max_digits=10),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "peak",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("qos", models.IntegerField(blank=True, null=True)),
                (
                    "rpsi",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "rtemp",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "rvolts",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("packet_timestamp", models.DateTimeField(blank=True, null=True)),
                ("topic", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("raw_data", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "receptor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core_app.receptor",
                    ),
                ),
                (
                    "sensor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core_app.sensor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lectura de Sensor",
                "verbose_name_plural": "Lecturas de Sensores",
                "db_table": "sensor_readings",
                "indexes": [
                    models.Index(
                        fields=["receptor"], name="sensor_read_recepto_b7ee25_idx"
                    ),
                    models.Index(
                        fields=["sensor"], name="sensor_read_sensor__85d3ba_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="sensor_read_created_8a2007_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SensorAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("position", models.TextField(blank=True, null=True)),
                (
                    "assigned_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("unassigned_at", models.DateTimeField(blank=True, null=True)),
                (
                    "sensor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core_app.sensor",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core_app.vehicle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Asignación de Sensor",
                "verbose_name_plural": "Asignaciones de Sensores",
                "db_table": "sensor_assignments",
                "unique_together": {("sensor", "vehicle", "unassigned_at")},
            },
        ),
    ]
